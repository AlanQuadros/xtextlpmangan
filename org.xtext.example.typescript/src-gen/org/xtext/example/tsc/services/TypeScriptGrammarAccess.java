/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.tsc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TypeScriptGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tsc.TypeScript.Model");
		private final Assignment cComputeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cComputeComputeParserRuleCall_0 = (RuleCall)cComputeAssignment.eContents().get(0);
		
		//Model:
		//	compute=Compute;
		@Override public ParserRule getRule() { return rule; }
		
		//compute=Compute
		public Assignment getComputeAssignment() { return cComputeAssignment; }
		
		//Compute
		public RuleCall getComputeComputeParserRuleCall_0() { return cComputeComputeParserRuleCall_0; }
	}
	public class ComputeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tsc.TypeScript.Compute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_0_0_0_0 = (Keyword)cGroup_1_0_0_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_0_0_1 = (Assignment)cGroup_1_0_0_0.eContents().get(1);
		private final RuleCall cExpressionClassesParserRuleCall_1_0_0_0_1_0 = (RuleCall)cExpressionAssignment_1_0_0_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_0_0_2 = (Keyword)cGroup_1_0_0_0.eContents().get(2);
		private final Assignment cExpressionAssignment_1_0_0_1 = (Assignment)cAlternatives_1_0_0.eContents().get(1);
		private final RuleCall cExpressionClassesParserRuleCall_1_0_0_1_0 = (RuleCall)cExpressionAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cFromKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNameTEXTOSTerminalRuleCall_1_0_2_0 = (RuleCall)cNameAssignment_1_0_2.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameTEXTOSTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Compute:
		//	'import' (('{' expression=Classes+ '}' | expression=Classes+) 'from' name=TEXTOS | name=TEXTOS) ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' (('{' expression=Classes+ '}' | expression=Classes+) 'from' name=TEXTOS | name=TEXTOS) ';'?
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//('{' expression=Classes+ '}' | expression=Classes+) 'from' name=TEXTOS | name=TEXTOS
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('{' expression=Classes+ '}' | expression=Classes+) 'from' name=TEXTOS
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'{' expression=Classes+ '}' | expression=Classes+
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//'{' expression=Classes+ '}'
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0_0_0_0() { return cLeftCurlyBracketKeyword_1_0_0_0_0; }
		
		//expression=Classes+
		public Assignment getExpressionAssignment_1_0_0_0_1() { return cExpressionAssignment_1_0_0_0_1; }
		
		//Classes
		public RuleCall getExpressionClassesParserRuleCall_1_0_0_0_1_0() { return cExpressionClassesParserRuleCall_1_0_0_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_0_0_0_2() { return cRightCurlyBracketKeyword_1_0_0_0_2; }
		
		//expression=Classes+
		public Assignment getExpressionAssignment_1_0_0_1() { return cExpressionAssignment_1_0_0_1; }
		
		//Classes
		public RuleCall getExpressionClassesParserRuleCall_1_0_0_1_0() { return cExpressionClassesParserRuleCall_1_0_0_1_0; }
		
		//'from'
		public Keyword getFromKeyword_1_0_1() { return cFromKeyword_1_0_1; }
		
		//name=TEXTOS
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }
		
		//TEXTOS
		public RuleCall getNameTEXTOSTerminalRuleCall_1_0_2_0() { return cNameTEXTOSTerminalRuleCall_1_0_2_0; }
		
		//name=TEXTOS
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//TEXTOS
		public RuleCall getNameTEXTOSTerminalRuleCall_1_1_0() { return cNameTEXTOSTerminalRuleCall_1_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ClassesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tsc.TypeScript.Classes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Classes:
		//	Expression ','?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression ','?
		public Group getGroup() { return cGroup; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//','?
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tsc.TypeScript.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDollarSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Expression:
		//	INT | ID | 'as' | '*' | '$';
		@Override public ParserRule getRule() { return rule; }
		
		//INT | ID | 'as' | '*' | '$'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }
		
		//'$'
		public Keyword getDollarSignKeyword_4() { return cDollarSignKeyword_4; }
	}
	
	
	private final ModelElements pModel;
	private final ComputeElements pCompute;
	private final ClassesElements pClasses;
	private final ExpressionElements pExpression;
	private final TerminalRule tTEXTOS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TypeScriptGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCompute = new ComputeElements();
		this.pClasses = new ClassesElements();
		this.pExpression = new ExpressionElements();
		this.tTEXTOS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.tsc.TypeScript.TEXTOS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.tsc.TypeScript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	compute=Compute;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Compute:
	//	'import' (('{' expression=Classes+ '}' | expression=Classes+) 'from' name=TEXTOS | name=TEXTOS) ';'?;
	public ComputeElements getComputeAccess() {
		return pCompute;
	}
	
	public ParserRule getComputeRule() {
		return getComputeAccess().getRule();
	}
	
	//Classes:
	//	Expression ','?;
	public ClassesElements getClassesAccess() {
		return pClasses;
	}
	
	public ParserRule getClassesRule() {
		return getClassesAccess().getRule();
	}
	
	//Expression:
	//	INT | ID | 'as' | '*' | '$';
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//terminal TEXTOS:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getTEXTOSRule() {
		return tTEXTOS;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
