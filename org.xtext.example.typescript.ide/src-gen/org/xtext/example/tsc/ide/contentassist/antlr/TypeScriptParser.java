/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.tsc.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.tsc.ide.contentassist.antlr.internal.InternalTypeScriptParser;
import org.xtext.example.tsc.services.TypeScriptGrammarAccess;

public class TypeScriptParser extends AbstractContentAssistParser {

	@Inject
	private TypeScriptGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalTypeScriptParser createParser() {
		InternalTypeScriptParser result = new InternalTypeScriptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getComputeAccess().getAlternatives_1(), "rule__Compute__Alternatives_1");
					put(grammarAccess.getComputeAccess().getAlternatives_1_0_0(), "rule__Compute__Alternatives_1_0_0");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getComputeAccess().getGroup(), "rule__Compute__Group__0");
					put(grammarAccess.getComputeAccess().getGroup_1_0(), "rule__Compute__Group_1_0__0");
					put(grammarAccess.getComputeAccess().getGroup_1_0_0_0(), "rule__Compute__Group_1_0_0_0__0");
					put(grammarAccess.getClassesAccess().getGroup(), "rule__Classes__Group__0");
					put(grammarAccess.getModelAccess().getComputeAssignment(), "rule__Model__ComputeAssignment");
					put(grammarAccess.getComputeAccess().getExpressionAssignment_1_0_0_0_1(), "rule__Compute__ExpressionAssignment_1_0_0_0_1");
					put(grammarAccess.getComputeAccess().getExpressionAssignment_1_0_0_1(), "rule__Compute__ExpressionAssignment_1_0_0_1");
					put(grammarAccess.getComputeAccess().getNameAssignment_1_0_2(), "rule__Compute__NameAssignment_1_0_2");
					put(grammarAccess.getComputeAccess().getNameAssignment_1_1(), "rule__Compute__NameAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TypeScriptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TypeScriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
