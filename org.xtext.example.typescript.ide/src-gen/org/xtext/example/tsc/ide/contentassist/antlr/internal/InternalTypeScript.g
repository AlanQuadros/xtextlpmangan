/*
 * generated by Xtext 2.13.0
 */
grammar InternalTypeScript;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.tsc.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.tsc.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.tsc.services.TypeScriptGrammarAccess;

}
@parser::members {
	private TypeScriptGrammarAccess grammarAccess;

	public void setGrammarAccess(TypeScriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGreetingsAssignment()); }
		(rule__Model__GreetingsAssignment)*
		{ after(grammarAccess.getModelAccess().getGreetingsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGreeting
entryRuleGreeting
:
{ before(grammarAccess.getGreetingRule()); }
	 ruleGreeting
{ after(grammarAccess.getGreetingRule()); } 
	 EOF 
;

// Rule Greeting
ruleGreeting 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGreetingAccess().getGroup()); }
		(rule__Greeting__Group__0)
		{ after(grammarAccess.getGreetingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreetingAccess().getGroup_1_0()); }
		(rule__Greeting__Group_1_0__0)
		{ after(grammarAccess.getGreetingAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getNameAssignment_1_1()); }
		(rule__Greeting__NameAssignment_1_1)
		{ after(grammarAccess.getGreetingAccess().getNameAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Alternatives_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreetingAccess().getGroup_1_0_0_0()); }
		(rule__Greeting__Group_1_0_0_0__0)
		{ after(grammarAccess.getGreetingAccess().getGroup_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getGreetingAccess().getGroup_1_0_0_1()); }
		(rule__Greeting__Group_1_0_0_1__0)*
		{ after(grammarAccess.getGreetingAccess().getGroup_1_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getExpressionAccess().getINTTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getExpressionAccess().getIDTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getAsKeyword_2()); }
		'as'
		{ after(grammarAccess.getExpressionAccess().getAsKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getAsteriskKeyword_3()); }
		'*'
		{ after(grammarAccess.getExpressionAccess().getAsteriskKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getDollarSignKeyword_4()); }
		'$'
		{ after(grammarAccess.getExpressionAccess().getDollarSignKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group__0__Impl
	rule__Greeting__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getGreetingAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group__1__Impl
	rule__Greeting__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getAlternatives_1()); }
	(rule__Greeting__Alternatives_1)
	{ after(grammarAccess.getGreetingAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getSemicolonKeyword_2()); }
	(';')?
	{ after(grammarAccess.getGreetingAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group_1_0__0__Impl
	rule__Greeting__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getAlternatives_1_0_0()); }
	(rule__Greeting__Alternatives_1_0_0)
	{ after(grammarAccess.getGreetingAccess().getAlternatives_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group_1_0__1__Impl
	rule__Greeting__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getFromKeyword_1_0_1()); }
	'from'
	{ after(grammarAccess.getGreetingAccess().getFromKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getNameAssignment_1_0_2()); }
	(rule__Greeting__NameAssignment_1_0_2)
	{ after(grammarAccess.getGreetingAccess().getNameAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group_1_0_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group_1_0_0_0__0__Impl
	rule__Greeting__Group_1_0_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getLeftCurlyBracketKeyword_1_0_0_0_0()); }
	'{'
	{ after(grammarAccess.getGreetingAccess().getLeftCurlyBracketKeyword_1_0_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group_1_0_0_0__1__Impl
	rule__Greeting__Group_1_0_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getGroup_1_0_0_0_1()); }
	(rule__Greeting__Group_1_0_0_0_1__0)*
	{ after(grammarAccess.getGreetingAccess().getGroup_1_0_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0_0_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group_1_0_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0_0_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getRightCurlyBracketKeyword_1_0_0_0_2()); }
	'}'
	{ after(grammarAccess.getGreetingAccess().getRightCurlyBracketKeyword_1_0_0_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group_1_0_0_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group_1_0_0_0_1__0__Impl
	rule__Greeting__Group_1_0_0_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0_0_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getExpressionAssignment_1_0_0_0_1_0()); }
	(rule__Greeting__ExpressionAssignment_1_0_0_0_1_0)
	{ after(grammarAccess.getGreetingAccess().getExpressionAssignment_1_0_0_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0_0_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group_1_0_0_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0_0_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getCommaKeyword_1_0_0_0_1_1()); }
	(',')?
	{ after(grammarAccess.getGreetingAccess().getCommaKeyword_1_0_0_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group_1_0_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group_1_0_0_1__0__Impl
	rule__Greeting__Group_1_0_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getExpressionAssignment_1_0_0_1_0()); }
	(rule__Greeting__ExpressionAssignment_1_0_0_1_0)
	{ after(grammarAccess.getGreetingAccess().getExpressionAssignment_1_0_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group_1_0_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group_1_0_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getCommaKeyword_1_0_0_1_1()); }
	(',')?
	{ after(grammarAccess.getGreetingAccess().getCommaKeyword_1_0_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__GreetingsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); }
		ruleGreeting
		{ after(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__ExpressionAssignment_1_0_0_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreetingAccess().getExpressionExpressionParserRuleCall_1_0_0_0_1_0_0()); }
		ruleExpression
		{ after(grammarAccess.getGreetingAccess().getExpressionExpressionParserRuleCall_1_0_0_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__ExpressionAssignment_1_0_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreetingAccess().getExpressionExpressionParserRuleCall_1_0_0_1_0_0()); }
		ruleExpression
		{ after(grammarAccess.getGreetingAccess().getExpressionExpressionParserRuleCall_1_0_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__NameAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreetingAccess().getNameTEXTOSTerminalRuleCall_1_0_2_0()); }
		RULE_TEXTOS
		{ after(grammarAccess.getGreetingAccess().getNameTEXTOSTerminalRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreetingAccess().getNameTEXTOSTerminalRuleCall_1_1_0()); }
		RULE_TEXTOS
		{ after(grammarAccess.getGreetingAccess().getNameTEXTOSTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_TEXTOS : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
