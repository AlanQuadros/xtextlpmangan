/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.tsc.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.xtext.example.tsc.typeScript.Model

@RunWith(XtextRunner)
@InjectWith(TypeScriptInjectorProvider)
class TypeScriptParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	@Test
	def void exemploUm() {
		val result = parseHelper.parse('''
			import { ZipCodeValidator } from "./ZipCodeValidator";
		''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
	
	@Test
	def void exemploDois() {
		val result = parseHelper.parse('''
			import { ZipCodeValidator as ZCV } from "./ZipCodeValidator";
		''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
	
	@Test
	def void exemploTres() {
		val result = parseHelper.parse('''
			import * as validator from "./ZipCodeValidator";
		''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
	
	@Test
	def void exemploQuatro() {
		val result = parseHelper.parse('''
			import "./my-module.js";
		''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
	
	@Test
	def void exemploCinco() {
		val result = parseHelper.parse('''
			import $ from "JQuery";
		''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
}
